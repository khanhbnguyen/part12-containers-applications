services:
  app:
    image: todo-frontend
    # build:
    #   context: . # The context will pick this directory as the "build context"
    #   dockerfile: ./todo-frontend/dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-frontend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    container_name: todo-frontend # This will name the container hello-front-dev
  mongo:
    image: mongo
    ports:
     - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db
  redis:
    image: redis
    ports:
     - 6379:6379
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./redis_data:/data
  server:
    image: todo-backend
    # build:
    #   context: . # The context will pick this directory as the "build context"
    #   dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-backend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    container_name: todo-backend # This will name the container hello-front-dev
    environment: 
      - REDIS_URL=//redis:6379
      - MONGO_URL=mongodb://root:password@mongo:27017/the_database
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - app
      - server

volumes:
  mongo_data: